/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 72.0, "minX": 0.0, "maxY": 62227.0, "series": [{"data": [[0.0, 92.0], [0.1, 95.0], [0.2, 98.0], [0.3, 98.0], [0.4, 114.0], [0.5, 202.0], [0.6, 204.0], [0.7, 205.0], [0.8, 205.0], [0.9, 206.0], [1.0, 206.0], [1.1, 206.0], [1.2, 206.0], [1.3, 206.0], [1.4, 206.0], [1.5, 207.0], [1.6, 207.0], [1.7, 207.0], [1.8, 207.0], [1.9, 207.0], [2.0, 207.0], [2.1, 207.0], [2.2, 208.0], [2.3, 208.0], [2.4, 208.0], [2.5, 208.0], [2.6, 208.0], [2.7, 208.0], [2.8, 208.0], [2.9, 208.0], [3.0, 208.0], [3.1, 208.0], [3.2, 208.0], [3.3, 208.0], [3.4, 208.0], [3.5, 209.0], [3.6, 209.0], [3.7, 209.0], [3.8, 209.0], [3.9, 209.0], [4.0, 209.0], [4.1, 209.0], [4.2, 209.0], [4.3, 209.0], [4.4, 209.0], [4.5, 209.0], [4.6, 209.0], [4.7, 209.0], [4.8, 209.0], [4.9, 209.0], [5.0, 209.0], [5.1, 209.0], [5.2, 210.0], [5.3, 210.0], [5.4, 210.0], [5.5, 210.0], [5.6, 210.0], [5.7, 210.0], [5.8, 210.0], [5.9, 210.0], [6.0, 210.0], [6.1, 210.0], [6.2, 210.0], [6.3, 210.0], [6.4, 210.0], [6.5, 210.0], [6.6, 210.0], [6.7, 210.0], [6.8, 210.0], [6.9, 210.0], [7.0, 210.0], [7.1, 210.0], [7.2, 211.0], [7.3, 211.0], [7.4, 211.0], [7.5, 211.0], [7.6, 211.0], [7.7, 211.0], [7.8, 211.0], [7.9, 211.0], [8.0, 211.0], [8.1, 211.0], [8.2, 211.0], [8.3, 211.0], [8.4, 211.0], [8.5, 211.0], [8.6, 211.0], [8.7, 211.0], [8.8, 211.0], [8.9, 211.0], [9.0, 211.0], [9.1, 211.0], [9.2, 212.0], [9.3, 212.0], [9.4, 212.0], [9.5, 212.0], [9.6, 212.0], [9.7, 212.0], [9.8, 212.0], [9.9, 212.0], [10.0, 212.0], [10.1, 212.0], [10.2, 212.0], [10.3, 212.0], [10.4, 212.0], [10.5, 212.0], [10.6, 212.0], [10.7, 212.0], [10.8, 213.0], [10.9, 213.0], [11.0, 213.0], [11.1, 213.0], [11.2, 213.0], [11.3, 213.0], [11.4, 213.0], [11.5, 213.0], [11.6, 213.0], [11.7, 213.0], [11.8, 213.0], [11.9, 214.0], [12.0, 214.0], [12.1, 214.0], [12.2, 214.0], [12.3, 214.0], [12.4, 214.0], [12.5, 214.0], [12.6, 214.0], [12.7, 214.0], [12.8, 214.0], [12.9, 214.0], [13.0, 214.0], [13.1, 214.0], [13.2, 214.0], [13.3, 215.0], [13.4, 215.0], [13.5, 215.0], [13.6, 215.0], [13.7, 215.0], [13.8, 215.0], [13.9, 215.0], [14.0, 215.0], [14.1, 215.0], [14.2, 216.0], [14.3, 216.0], [14.4, 216.0], [14.5, 216.0], [14.6, 216.0], [14.7, 216.0], [14.8, 216.0], [14.9, 216.0], [15.0, 216.0], [15.1, 216.0], [15.2, 216.0], [15.3, 217.0], [15.4, 217.0], [15.5, 217.0], [15.6, 217.0], [15.7, 217.0], [15.8, 217.0], [15.9, 217.0], [16.0, 217.0], [16.1, 217.0], [16.2, 217.0], [16.3, 217.0], [16.4, 217.0], [16.5, 218.0], [16.6, 218.0], [16.7, 218.0], [16.8, 219.0], [16.9, 219.0], [17.0, 220.0], [17.1, 220.0], [17.2, 220.0], [17.3, 221.0], [17.4, 221.0], [17.5, 221.0], [17.6, 224.0], [17.7, 224.0], [17.8, 263.0], [17.9, 263.0], [18.0, 279.0], [18.1, 592.0], [18.2, 6266.0], [18.3, 6563.0], [18.4, 6865.0], [18.5, 7160.0], [18.6, 7463.0], [18.7, 7754.0], [18.8, 8064.0], [18.9, 8355.0], [19.0, 8661.0], [19.1, 8962.0], [19.2, 9242.0], [19.3, 9558.0], [19.4, 9860.0], [19.5, 10156.0], [19.6, 10419.0], [19.7, 10747.0], [19.8, 11033.0], [19.9, 11305.0], [20.0, 11606.0], [20.1, 12209.0], [20.2, 12507.0], [20.3, 12810.0], [20.4, 13105.0], [20.5, 13403.0], [20.6, 13975.0], [20.7, 14278.0], [20.8, 14576.0], [20.9, 14879.0], [21.0, 15178.0], [21.1, 15469.0], [21.2, 15763.0], [21.3, 16073.0], [21.4, 16365.0], [21.5, 16664.0], [21.6, 16956.0], [21.7, 17261.0], [21.8, 17526.0], [21.9, 18758.0], [22.0, 19024.0], [22.1, 19326.0], [22.2, 19652.0], [22.3, 19917.0], [22.4, 20116.0], [22.5, 20411.0], [22.6, 20818.0], [22.7, 21119.0], [22.8, 21414.0], [22.9, 21588.0], [23.0, 21914.0], [23.1, 22326.0], [23.2, 22509.0], [23.3, 22786.0], [23.4, 23070.0], [23.5, 23368.0], [23.6, 23683.0], [23.7, 23986.0], [23.8, 24285.0], [23.9, 24557.0], [24.0, 24855.0], [24.1, 25154.0], [24.2, 25439.0], [24.3, 25756.0], [24.4, 26080.0], [24.5, 26334.0], [24.6, 26630.0], [24.7, 26630.0], [24.8, 26927.0], [24.9, 26931.0], [25.0, 27220.0], [25.1, 27225.0], [25.2, 27374.0], [25.3, 27526.0], [25.4, 27529.0], [25.5, 27642.0], [25.6, 27793.0], [25.7, 27939.0], [25.8, 28099.0], [25.9, 28113.0], [26.0, 28229.0], [26.1, 28411.0], [26.2, 28417.0], [26.3, 28519.0], [26.4, 28689.0], [26.5, 28705.0], [26.6, 28808.0], [26.7, 28994.0], [26.8, 29000.0], [26.9, 29110.0], [27.0, 29287.0], [27.1, 29295.0], [27.2, 29397.0], [27.3, 29570.0], [27.4, 29599.0], [27.5, 29687.0], [27.6, 29879.0], [27.7, 29886.0], [27.8, 29976.0], [27.9, 30083.0], [28.0, 30084.0], [28.1, 30084.0], [28.2, 30085.0], [28.3, 30085.0], [28.4, 30086.0], [28.5, 30086.0], [28.6, 30086.0], [28.7, 30086.0], [28.8, 30086.0], [28.9, 30086.0], [29.0, 30086.0], [29.1, 30086.0], [29.2, 30086.0], [29.3, 30086.0], [29.4, 30086.0], [29.5, 30086.0], [29.6, 30086.0], [29.7, 30086.0], [29.8, 30086.0], [29.9, 30086.0], [30.0, 30086.0], [30.1, 30086.0], [30.2, 30086.0], [30.3, 30087.0], [30.4, 30087.0], [30.5, 30087.0], [30.6, 30087.0], [30.7, 30087.0], [30.8, 30087.0], [30.9, 30087.0], [31.0, 30087.0], [31.1, 30087.0], [31.2, 30087.0], [31.3, 30087.0], [31.4, 30087.0], [31.5, 30087.0], [31.6, 30087.0], [31.7, 30087.0], [31.8, 30087.0], [31.9, 30087.0], [32.0, 30087.0], [32.1, 30087.0], [32.2, 30087.0], [32.3, 30087.0], [32.4, 30087.0], [32.5, 30087.0], [32.6, 30087.0], [32.7, 30087.0], [32.8, 30087.0], [32.9, 30087.0], [33.0, 30087.0], [33.1, 30087.0], [33.2, 30087.0], [33.3, 30087.0], [33.4, 30088.0], [33.5, 30088.0], [33.6, 30088.0], [33.7, 30088.0], [33.8, 30088.0], [33.9, 30088.0], [34.0, 30088.0], [34.1, 30088.0], [34.2, 30088.0], [34.3, 30088.0], [34.4, 30088.0], [34.5, 30088.0], [34.6, 30088.0], [34.7, 30088.0], [34.8, 30088.0], [34.9, 30088.0], [35.0, 30088.0], [35.1, 30088.0], [35.2, 30088.0], [35.3, 30088.0], [35.4, 30088.0], [35.5, 30088.0], [35.6, 30088.0], [35.7, 30088.0], [35.8, 30088.0], [35.9, 30088.0], [36.0, 30088.0], [36.1, 30088.0], [36.2, 30088.0], [36.3, 30088.0], [36.4, 30088.0], [36.5, 30088.0], [36.6, 30088.0], [36.7, 30088.0], [36.8, 30088.0], [36.9, 30089.0], [37.0, 30089.0], [37.1, 30089.0], [37.2, 30089.0], [37.3, 30089.0], [37.4, 30089.0], [37.5, 30089.0], [37.6, 30089.0], [37.7, 30089.0], [37.8, 30089.0], [37.9, 30089.0], [38.0, 30089.0], [38.1, 30089.0], [38.2, 30089.0], [38.3, 30089.0], [38.4, 30089.0], [38.5, 30089.0], [38.6, 30089.0], [38.7, 30089.0], [38.8, 30089.0], [38.9, 30089.0], [39.0, 30089.0], [39.1, 30089.0], [39.2, 30089.0], [39.3, 30089.0], [39.4, 30089.0], [39.5, 30089.0], [39.6, 30089.0], [39.7, 30089.0], [39.8, 30089.0], [39.9, 30089.0], [40.0, 30089.0], [40.1, 30089.0], [40.2, 30089.0], [40.3, 30089.0], [40.4, 30089.0], [40.5, 30089.0], [40.6, 30089.0], [40.7, 30089.0], [40.8, 30089.0], [40.9, 30090.0], [41.0, 30090.0], [41.1, 30090.0], [41.2, 30090.0], [41.3, 30090.0], [41.4, 30090.0], [41.5, 30090.0], [41.6, 30090.0], [41.7, 30090.0], [41.8, 30090.0], [41.9, 30090.0], [42.0, 30090.0], [42.1, 30090.0], [42.2, 30090.0], [42.3, 30090.0], [42.4, 30090.0], [42.5, 30090.0], [42.6, 30090.0], [42.7, 30090.0], [42.8, 30090.0], [42.9, 30090.0], [43.0, 30090.0], [43.1, 30091.0], [43.2, 30091.0], [43.3, 30091.0], [43.4, 30091.0], [43.5, 30091.0], [43.6, 30091.0], [43.7, 30091.0], [43.8, 30091.0], [43.9, 30091.0], [44.0, 30091.0], [44.1, 30091.0], [44.2, 30091.0], [44.3, 30091.0], [44.4, 30091.0], [44.5, 30092.0], [44.6, 30092.0], [44.7, 30092.0], [44.8, 30092.0], [44.9, 30092.0], [45.0, 30092.0], [45.1, 30092.0], [45.2, 30093.0], [45.3, 30093.0], [45.4, 30094.0], [45.5, 30095.0], [45.6, 30095.0], [45.7, 30095.0], [45.8, 30098.0], [45.9, 30098.0], [46.0, 30101.0], [46.1, 30101.0], [46.2, 30103.0], [46.3, 30144.0], [46.4, 30158.0], [46.5, 30180.0], [46.6, 30186.0], [46.7, 30200.0], [46.8, 30213.0], [46.9, 30269.0], [47.0, 30288.0], [47.1, 30297.0], [47.2, 30389.0], [47.3, 30421.0], [47.4, 30502.0], [47.5, 30504.0], [47.6, 30550.0], [47.7, 30600.0], [47.8, 30672.0], [47.9, 30688.0], [48.0, 30711.0], [48.1, 30712.0], [48.2, 30773.0], [48.3, 30780.0], [48.4, 30782.0], [48.5, 30782.0], [48.6, 30782.0], [48.7, 30783.0], [48.8, 30784.0], [48.9, 30784.0], [49.0, 30787.0], [49.1, 30788.0], [49.2, 30789.0], [49.3, 30790.0], [49.4, 30794.0], [49.5, 30795.0], [49.6, 30798.0], [49.7, 30808.0], [49.8, 30828.0], [49.9, 30850.0], [50.0, 30899.0], [50.1, 30928.0], [50.2, 30973.0], [50.3, 30989.0], [50.4, 30992.0], [50.5, 31079.0], [50.6, 31086.0], [50.7, 31102.0], [50.8, 31177.0], [50.9, 31242.0], [51.0, 31287.0], [51.1, 31294.0], [51.2, 31341.0], [51.3, 31381.0], [51.4, 31395.0], [51.5, 31470.0], [51.6, 31509.0], [51.7, 31585.0], [51.8, 31586.0], [51.9, 31586.0], [52.0, 31586.0], [52.1, 31587.0], [52.2, 31587.0], [52.3, 31587.0], [52.4, 31587.0], [52.5, 31587.0], [52.6, 31587.0], [52.7, 31588.0], [52.8, 31588.0], [52.9, 31589.0], [53.0, 31589.0], [53.1, 31589.0], [53.2, 31589.0], [53.3, 31589.0], [53.4, 31589.0], [53.5, 31589.0], [53.6, 31589.0], [53.7, 31589.0], [53.8, 31589.0], [53.9, 31589.0], [54.0, 31589.0], [54.1, 31589.0], [54.2, 31590.0], [54.3, 31590.0], [54.4, 31590.0], [54.5, 31590.0], [54.6, 31590.0], [54.7, 31591.0], [54.8, 31591.0], [54.9, 31591.0], [55.0, 31591.0], [55.1, 31591.0], [55.2, 31591.0], [55.3, 31591.0], [55.4, 31592.0], [55.5, 31592.0], [55.6, 31592.0], [55.7, 31592.0], [55.8, 31592.0], [55.9, 31592.0], [56.0, 31593.0], [56.1, 31593.0], [56.2, 31593.0], [56.3, 31593.0], [56.4, 31593.0], [56.5, 31594.0], [56.6, 31594.0], [56.7, 31595.0], [56.8, 31595.0], [56.9, 31596.0], [57.0, 31598.0], [57.1, 31600.0], [57.2, 31602.0], [57.3, 31603.0], [57.4, 31604.0], [57.5, 31615.0], [57.6, 31674.0], [57.7, 31684.0], [57.8, 31689.0], [57.9, 31689.0], [58.0, 31698.0], [58.1, 31764.0], [58.2, 31780.0], [58.3, 31804.0], [58.4, 31877.0], [58.5, 31889.0], [58.6, 31890.0], [58.7, 31892.0], [58.8, 31894.0], [58.9, 31894.0], [59.0, 31898.0], [59.1, 31898.0], [59.2, 31983.0], [59.3, 31983.0], [59.4, 31983.0], [59.5, 31984.0], [59.6, 31986.0], [59.7, 31986.0], [59.8, 31987.0], [59.9, 31989.0], [60.0, 31990.0], [60.1, 31992.0], [60.2, 31999.0], [60.3, 32000.0], [60.4, 32012.0], [60.5, 32037.0], [60.6, 32072.0], [60.7, 32090.0], [60.8, 32144.0], [60.9, 32159.0], [61.0, 32188.0], [61.1, 32189.0], [61.2, 32190.0], [61.3, 32190.0], [61.4, 32191.0], [61.5, 32191.0], [61.6, 32192.0], [61.7, 32192.0], [61.8, 32192.0], [61.9, 32192.0], [62.0, 32192.0], [62.1, 32192.0], [62.2, 32192.0], [62.3, 32193.0], [62.4, 32193.0], [62.5, 32193.0], [62.6, 32193.0], [62.7, 32193.0], [62.8, 32193.0], [62.9, 32193.0], [63.0, 32193.0], [63.1, 32193.0], [63.2, 32194.0], [63.3, 32194.0], [63.4, 32194.0], [63.5, 32194.0], [63.6, 32194.0], [63.7, 32194.0], [63.8, 32194.0], [63.9, 32195.0], [64.0, 32195.0], [64.1, 32195.0], [64.2, 32195.0], [64.3, 32196.0], [64.4, 32196.0], [64.5, 32196.0], [64.6, 32196.0], [64.7, 32196.0], [64.8, 32196.0], [64.9, 32196.0], [65.0, 32196.0], [65.1, 32196.0], [65.2, 32198.0], [65.3, 32198.0], [65.4, 32199.0], [65.5, 32199.0], [65.6, 32199.0], [65.7, 32202.0], [65.8, 32203.0], [65.9, 32205.0], [66.0, 32207.0], [66.1, 32213.0], [66.2, 32245.0], [66.3, 32284.0], [66.4, 32287.0], [66.5, 32287.0], [66.6, 32297.0], [66.7, 32323.0], [66.8, 32368.0], [66.9, 32406.0], [67.0, 32412.0], [67.1, 32495.0], [67.2, 32498.0], [67.3, 32519.0], [67.4, 32598.0], [67.5, 32615.0], [67.6, 32631.0], [67.7, 32681.0], [67.8, 32702.0], [67.9, 32777.0], [68.0, 32790.0], [68.1, 32795.0], [68.2, 32798.0], [68.3, 32800.0], [68.4, 32802.0], [68.5, 32810.0], [68.6, 32875.0], [68.7, 32887.0], [68.8, 32892.0], [68.9, 32892.0], [69.0, 32894.0], [69.1, 32905.0], [69.2, 32973.0], [69.3, 33002.0], [69.4, 33049.0], [69.5, 33096.0], [69.6, 33098.0], [69.7, 33100.0], [69.8, 33102.0], [69.9, 33107.0], [70.0, 33117.0], [70.1, 33150.0], [70.2, 33186.0], [70.3, 33188.0], [70.4, 33188.0], [70.5, 33199.0], [70.6, 33267.0], [70.7, 33309.0], [70.8, 33343.0], [70.9, 33381.0], [71.0, 33382.0], [71.1, 33383.0], [71.2, 33383.0], [71.3, 33383.0], [71.4, 33384.0], [71.5, 33384.0], [71.6, 33385.0], [71.7, 33386.0], [71.8, 33387.0], [71.9, 33387.0], [72.0, 33387.0], [72.1, 33388.0], [72.2, 33389.0], [72.3, 33389.0], [72.4, 33391.0], [72.5, 33392.0], [72.6, 33392.0], [72.7, 33392.0], [72.8, 33393.0], [72.9, 33393.0], [73.0, 33393.0], [73.1, 33393.0], [73.2, 33394.0], [73.3, 33394.0], [73.4, 33395.0], [73.5, 33395.0], [73.6, 33396.0], [73.7, 33397.0], [73.8, 33397.0], [73.9, 33397.0], [74.0, 33398.0], [74.1, 33398.0], [74.2, 33398.0], [74.3, 33398.0], [74.4, 33398.0], [74.5, 33400.0], [74.6, 33400.0], [74.7, 33402.0], [74.8, 33403.0], [74.9, 33403.0], [75.0, 33405.0], [75.1, 33406.0], [75.2, 33409.0], [75.3, 33413.0], [75.4, 33421.0], [75.5, 33482.0], [75.6, 33484.0], [75.7, 33484.0], [75.8, 33485.0], [75.9, 33486.0], [76.0, 33487.0], [76.1, 33489.0], [76.2, 33490.0], [76.3, 33494.0], [76.4, 33494.0], [76.5, 33510.0], [76.6, 33543.0], [76.7, 33606.0], [76.8, 33664.0], [76.9, 33695.0], [77.0, 33696.0], [77.1, 33699.0], [77.2, 33699.0], [77.3, 33700.0], [77.4, 33701.0], [77.5, 33701.0], [77.6, 33782.0], [77.7, 33784.0], [77.8, 33786.0], [77.9, 33787.0], [78.0, 33788.0], [78.1, 33789.0], [78.2, 33790.0], [78.3, 33792.0], [78.4, 33796.0], [78.5, 33828.0], [78.6, 33902.0], [78.7, 33988.0], [78.8, 33997.0], [78.9, 33997.0], [79.0, 33999.0], [79.1, 33999.0], [79.2, 34004.0], [79.3, 34049.0], [79.4, 34080.0], [79.5, 34082.0], [79.6, 34083.0], [79.7, 34083.0], [79.8, 34088.0], [79.9, 34096.0], [80.0, 34103.0], [80.1, 34213.0], [80.2, 34278.0], [80.3, 34294.0], [80.4, 34295.0], [80.5, 34295.0], [80.6, 34296.0], [80.7, 34297.0], [80.8, 34297.0], [80.9, 34297.0], [81.0, 34297.0], [81.1, 34297.0], [81.2, 34298.0], [81.3, 34298.0], [81.4, 34298.0], [81.5, 34298.0], [81.6, 34299.0], [81.7, 34299.0], [81.8, 34300.0], [81.9, 34300.0], [82.0, 34300.0], [82.1, 34300.0], [82.2, 34300.0], [82.3, 34300.0], [82.4, 34300.0], [82.5, 34300.0], [82.6, 34301.0], [82.7, 34301.0], [82.8, 34301.0], [82.9, 34302.0], [83.0, 34310.0], [83.1, 34313.0], [83.2, 34313.0], [83.3, 34382.0], [83.4, 34385.0], [83.5, 34387.0], [83.6, 34390.0], [83.7, 34391.0], [83.8, 34391.0], [83.9, 34392.0], [84.0, 34392.0], [84.1, 34397.0], [84.2, 34504.0], [84.3, 34570.0], [84.4, 34592.0], [84.5, 34597.0], [84.6, 34599.0], [84.7, 34599.0], [84.8, 34599.0], [84.9, 34599.0], [85.0, 34600.0], [85.1, 34610.0], [85.2, 34613.0], [85.3, 34682.0], [85.4, 34691.0], [85.5, 34693.0], [85.6, 34693.0], [85.7, 34694.0], [85.8, 34699.0], [85.9, 34829.0], [86.0, 34894.0], [86.1, 34902.0], [86.2, 34902.0], [86.3, 34902.0], [86.4, 34902.0], [86.5, 34903.0], [86.6, 34948.0], [86.7, 34955.0], [86.8, 34986.0], [86.9, 34989.0], [87.0, 34990.0], [87.1, 34992.0], [87.2, 34994.0], [87.3, 34995.0], [87.4, 35115.0], [87.5, 35195.0], [87.6, 35199.0], [87.7, 35201.0], [87.8, 35205.0], [87.9, 35221.0], [88.0, 35227.0], [88.1, 35285.0], [88.2, 35286.0], [88.3, 35286.0], [88.4, 35286.0], [88.5, 35288.0], [88.6, 35289.0], [88.7, 35290.0], [88.8, 35290.0], [88.9, 35291.0], [89.0, 35291.0], [89.1, 35292.0], [89.2, 35295.0], [89.3, 35295.0], [89.4, 35299.0], [89.5, 35415.0], [89.6, 35494.0], [89.7, 35498.0], [89.8, 35498.0], [89.9, 35499.0], [90.0, 35500.0], [90.1, 35501.0], [90.2, 35502.0], [90.3, 35503.0], [90.4, 35504.0], [90.5, 35506.0], [90.6, 35507.0], [90.7, 35511.0], [90.8, 35514.0], [90.9, 35576.0], [91.0, 35583.0], [91.1, 35584.0], [91.2, 35584.0], [91.3, 35585.0], [91.4, 35586.0], [91.5, 35586.0], [91.6, 35587.0], [91.7, 35589.0], [91.8, 35589.0], [91.9, 35591.0], [92.0, 35591.0], [92.1, 35593.0], [92.2, 35593.0], [92.3, 35594.0], [92.4, 35597.0], [92.5, 35602.0], [92.6, 35633.0], [92.7, 35767.0], [92.8, 35791.0], [92.9, 35794.0], [93.0, 35796.0], [93.1, 35802.0], [93.2, 35803.0], [93.3, 35803.0], [93.4, 35804.0], [93.5, 35805.0], [93.6, 35806.0], [93.7, 35824.0], [93.8, 35886.0], [93.9, 35887.0], [94.0, 35889.0], [94.1, 35890.0], [94.2, 35891.0], [94.3, 35891.0], [94.4, 35892.0], [94.5, 35892.0], [94.6, 35906.0], [94.7, 36031.0], [94.8, 36096.0], [94.9, 36111.0], [95.0, 36187.0], [95.1, 36195.0], [95.2, 36211.0], [95.3, 36320.0], [95.4, 36397.0], [95.5, 36406.0], [95.6, 36408.0], [95.7, 36486.0], [95.8, 36492.0], [95.9, 36496.0], [96.0, 36497.0], [96.1, 36497.0], [96.2, 36498.0], [96.3, 36499.0], [96.4, 36499.0], [96.5, 36499.0], [96.6, 36502.0], [96.7, 36502.0], [96.8, 36503.0], [96.9, 36503.0], [97.0, 36524.0], [97.1, 36621.0], [97.2, 36702.0], [97.3, 36784.0], [97.4, 36918.0], [97.5, 37006.0], [97.6, 37009.0], [97.7, 37088.0], [97.8, 37219.0], [97.9, 37300.0], [98.0, 37312.0], [98.1, 37396.0], [98.2, 37413.0], [98.3, 37606.0], [98.4, 37608.0], [98.5, 37608.0], [98.6, 37609.0], [98.7, 37610.0], [98.8, 37610.0], [98.9, 37611.0], [99.0, 37611.0], [99.1, 37611.0], [99.2, 37611.0], [99.3, 37613.0], [99.4, 37613.0], [99.5, 37614.0], [99.6, 37614.0], [99.7, 37617.0], [99.8, 37618.0], [99.9, 37622.0]], "isOverall": false, "label": "Get posts", "isController": false}, {"data": [[0.0, 72.0], [0.1, 73.0], [0.2, 74.0], [0.3, 74.0], [0.4, 75.0], [0.5, 75.0], [0.6, 75.0], [0.7, 76.0], [0.8, 76.0], [0.9, 76.0], [1.0, 76.0], [1.1, 76.0], [1.2, 77.0], [1.3, 77.0], [1.4, 77.0], [1.5, 77.0], [1.6, 77.0], [1.7, 77.0], [1.8, 77.0], [1.9, 77.0], [2.0, 77.0], [2.1, 78.0], [2.2, 78.0], [2.3, 78.0], [2.4, 78.0], [2.5, 78.0], [2.6, 78.0], [2.7, 78.0], [2.8, 78.0], [2.9, 78.0], [3.0, 79.0], [3.1, 79.0], [3.2, 79.0], [3.3, 79.0], [3.4, 79.0], [3.5, 79.0], [3.6, 79.0], [3.7, 79.0], [3.8, 79.0], [3.9, 79.0], [4.0, 79.0], [4.1, 79.0], [4.2, 79.0], [4.3, 80.0], [4.4, 80.0], [4.5, 80.0], [4.6, 80.0], [4.7, 80.0], [4.8, 80.0], [4.9, 80.0], [5.0, 80.0], [5.1, 80.0], [5.2, 80.0], [5.3, 80.0], [5.4, 80.0], [5.5, 80.0], [5.6, 80.0], [5.7, 81.0], [5.8, 81.0], [5.9, 81.0], [6.0, 81.0], [6.1, 81.0], [6.2, 81.0], [6.3, 81.0], [6.4, 81.0], [6.5, 82.0], [6.6, 82.0], [6.7, 82.0], [6.8, 82.0], [6.9, 82.0], [7.0, 82.0], [7.1, 82.0], [7.2, 82.0], [7.3, 82.0], [7.4, 82.0], [7.5, 82.0], [7.6, 82.0], [7.7, 83.0], [7.8, 83.0], [7.9, 83.0], [8.0, 83.0], [8.1, 83.0], [8.2, 83.0], [8.3, 83.0], [8.4, 83.0], [8.5, 83.0], [8.6, 83.0], [8.7, 83.0], [8.8, 83.0], [8.9, 83.0], [9.0, 83.0], [9.1, 83.0], [9.2, 84.0], [9.3, 84.0], [9.4, 84.0], [9.5, 84.0], [9.6, 84.0], [9.7, 84.0], [9.8, 84.0], [9.9, 84.0], [10.0, 84.0], [10.1, 84.0], [10.2, 84.0], [10.3, 84.0], [10.4, 84.0], [10.5, 84.0], [10.6, 84.0], [10.7, 84.0], [10.8, 85.0], [10.9, 85.0], [11.0, 85.0], [11.1, 85.0], [11.2, 85.0], [11.3, 85.0], [11.4, 85.0], [11.5, 85.0], [11.6, 85.0], [11.7, 85.0], [11.8, 86.0], [11.9, 86.0], [12.0, 86.0], [12.1, 86.0], [12.2, 86.0], [12.3, 86.0], [12.4, 86.0], [12.5, 86.0], [12.6, 86.0], [12.7, 86.0], [12.8, 86.0], [12.9, 87.0], [13.0, 87.0], [13.1, 87.0], [13.2, 87.0], [13.3, 87.0], [13.4, 88.0], [13.5, 88.0], [13.6, 88.0], [13.7, 88.0], [13.8, 89.0], [13.9, 89.0], [14.0, 89.0], [14.1, 90.0], [14.2, 90.0], [14.3, 91.0], [14.4, 91.0], [14.5, 92.0], [14.6, 92.0], [14.7, 92.0], [14.8, 92.0], [14.9, 92.0], [15.0, 92.0], [15.1, 92.0], [15.2, 93.0], [15.3, 93.0], [15.4, 93.0], [15.5, 93.0], [15.6, 93.0], [15.7, 93.0], [15.8, 93.0], [15.9, 93.0], [16.0, 94.0], [16.1, 94.0], [16.2, 95.0], [16.3, 95.0], [16.4, 96.0], [16.5, 96.0], [16.6, 96.0], [16.7, 97.0], [16.8, 98.0], [16.9, 98.0], [17.0, 100.0], [17.1, 102.0], [17.2, 103.0], [17.3, 105.0], [17.4, 105.0], [17.5, 107.0], [17.6, 110.0], [17.7, 111.0], [17.8, 123.0], [17.9, 189.0], [18.0, 30043.0], [18.1, 30043.0], [18.2, 30043.0], [18.3, 30044.0], [18.4, 30044.0], [18.5, 30044.0], [18.6, 30044.0], [18.7, 30044.0], [18.8, 30044.0], [18.9, 30045.0], [19.0, 30045.0], [19.1, 30045.0], [19.2, 30045.0], [19.3, 30045.0], [19.4, 30045.0], [19.5, 30045.0], [19.6, 30045.0], [19.7, 30046.0], [19.8, 30046.0], [19.9, 30046.0], [20.0, 30046.0], [20.1, 30046.0], [20.2, 30047.0], [20.3, 30047.0], [20.4, 30047.0], [20.5, 30047.0], [20.6, 30047.0], [20.7, 30047.0], [20.8, 30047.0], [20.9, 30048.0], [21.0, 30048.0], [21.1, 30049.0], [21.2, 30049.0], [21.3, 30049.0], [21.4, 30049.0], [21.5, 30049.0], [21.6, 30049.0], [21.7, 30050.0], [21.8, 30050.0], [21.9, 30051.0], [22.0, 30051.0], [22.1, 30052.0], [22.2, 30052.0], [22.3, 30054.0], [22.4, 30054.0], [22.5, 30054.0], [22.6, 30054.0], [22.7, 30056.0], [22.8, 30056.0], [22.9, 30057.0], [23.0, 30057.0], [23.1, 30058.0], [23.2, 30059.0], [23.3, 30060.0], [23.4, 30060.0], [23.5, 30063.0], [23.6, 30063.0], [23.7, 30070.0], [23.8, 30073.0], [23.9, 30081.0], [24.0, 30082.0], [24.1, 30083.0], [24.2, 30083.0], [24.3, 30084.0], [24.4, 30084.0], [24.5, 30084.0], [24.6, 30085.0], [24.7, 30085.0], [24.8, 30085.0], [24.9, 30085.0], [25.0, 30085.0], [25.1, 30085.0], [25.2, 30085.0], [25.3, 30085.0], [25.4, 30085.0], [25.5, 30085.0], [25.6, 30085.0], [25.7, 30086.0], [25.8, 30086.0], [25.9, 30086.0], [26.0, 30086.0], [26.1, 30086.0], [26.2, 30086.0], [26.3, 30086.0], [26.4, 30086.0], [26.5, 30086.0], [26.6, 30086.0], [26.7, 30086.0], [26.8, 30086.0], [26.9, 30086.0], [27.0, 30086.0], [27.1, 30086.0], [27.2, 30086.0], [27.3, 30086.0], [27.4, 30086.0], [27.5, 30086.0], [27.6, 30086.0], [27.7, 30086.0], [27.8, 30086.0], [27.9, 30086.0], [28.0, 30086.0], [28.1, 30086.0], [28.2, 30086.0], [28.3, 30086.0], [28.4, 30086.0], [28.5, 30086.0], [28.6, 30086.0], [28.7, 30086.0], [28.8, 30086.0], [28.9, 30086.0], [29.0, 30086.0], [29.1, 30087.0], [29.2, 30087.0], [29.3, 30087.0], [29.4, 30087.0], [29.5, 30087.0], [29.6, 30087.0], [29.7, 30087.0], [29.8, 30087.0], [29.9, 30087.0], [30.0, 30087.0], [30.1, 30087.0], [30.2, 30087.0], [30.3, 30087.0], [30.4, 30087.0], [30.5, 30087.0], [30.6, 30087.0], [30.7, 30087.0], [30.8, 30087.0], [30.9, 30087.0], [31.0, 30087.0], [31.1, 30087.0], [31.2, 30087.0], [31.3, 30087.0], [31.4, 30087.0], [31.5, 30087.0], [31.6, 30087.0], [31.7, 30087.0], [31.8, 30087.0], [31.9, 30087.0], [32.0, 30087.0], [32.1, 30087.0], [32.2, 30087.0], [32.3, 30087.0], [32.4, 30087.0], [32.5, 30087.0], [32.6, 30087.0], [32.7, 30087.0], [32.8, 30087.0], [32.9, 30087.0], [33.0, 30087.0], [33.1, 30087.0], [33.2, 30087.0], [33.3, 30087.0], [33.4, 30087.0], [33.5, 30088.0], [33.6, 30088.0], [33.7, 30088.0], [33.8, 30088.0], [33.9, 30088.0], [34.0, 30088.0], [34.1, 30088.0], [34.2, 30088.0], [34.3, 30088.0], [34.4, 30088.0], [34.5, 30088.0], [34.6, 30088.0], [34.7, 30088.0], [34.8, 30088.0], [34.9, 30088.0], [35.0, 30088.0], [35.1, 30088.0], [35.2, 30088.0], [35.3, 30088.0], [35.4, 30088.0], [35.5, 30088.0], [35.6, 30088.0], [35.7, 30088.0], [35.8, 30088.0], [35.9, 30088.0], [36.0, 30088.0], [36.1, 30088.0], [36.2, 30089.0], [36.3, 30089.0], [36.4, 30089.0], [36.5, 30089.0], [36.6, 30089.0], [36.7, 30089.0], [36.8, 30089.0], [36.9, 30089.0], [37.0, 30089.0], [37.1, 30089.0], [37.2, 30089.0], [37.3, 30089.0], [37.4, 30089.0], [37.5, 30089.0], [37.6, 30089.0], [37.7, 30090.0], [37.8, 30090.0], [37.9, 30090.0], [38.0, 30090.0], [38.1, 30090.0], [38.2, 30092.0], [38.3, 30092.0], [38.4, 30093.0], [38.5, 30093.0], [38.6, 30094.0], [38.7, 30095.0], [38.8, 30095.0], [38.9, 30095.0], [39.0, 30095.0], [39.1, 30095.0], [39.2, 30096.0], [39.3, 30097.0], [39.4, 30098.0], [39.5, 30098.0], [39.6, 30099.0], [39.7, 30099.0], [39.8, 30101.0], [39.9, 30112.0], [40.0, 30117.0], [40.1, 30140.0], [40.2, 30144.0], [40.3, 30166.0], [40.4, 30170.0], [40.5, 30178.0], [40.6, 30178.0], [40.7, 30186.0], [40.8, 30187.0], [40.9, 30204.0], [41.0, 30210.0], [41.1, 30211.0], [41.2, 30212.0], [41.3, 30215.0], [41.4, 30223.0], [41.5, 30224.0], [41.6, 30234.0], [41.7, 30254.0], [41.8, 30266.0], [41.9, 30267.0], [42.0, 30270.0], [42.1, 30276.0], [42.2, 30308.0], [42.3, 30311.0], [42.4, 30318.0], [42.5, 30325.0], [42.6, 30330.0], [42.7, 30342.0], [42.8, 30351.0], [42.9, 30351.0], [43.0, 30352.0], [43.1, 30352.0], [43.2, 30370.0], [43.3, 30378.0], [43.4, 30395.0], [43.5, 30395.0], [43.6, 30413.0], [43.7, 30417.0], [43.8, 30422.0], [43.9, 30429.0], [44.0, 30445.0], [44.1, 30448.0], [44.2, 30460.0], [44.3, 30462.0], [44.4, 30512.0], [44.5, 30560.0], [44.6, 30598.0], [44.7, 30605.0], [44.8, 30609.0], [44.9, 30651.0], [45.0, 30675.0], [45.1, 30676.0], [45.2, 30685.0], [45.3, 30687.0], [45.4, 30687.0], [45.5, 30692.0], [45.6, 30692.0], [45.7, 30692.0], [45.8, 30695.0], [45.9, 30699.0], [46.0, 30718.0], [46.1, 30763.0], [46.2, 30795.0], [46.3, 30803.0], [46.4, 30803.0], [46.5, 30811.0], [46.6, 30811.0], [46.7, 30816.0], [46.8, 30817.0], [46.9, 30818.0], [47.0, 30819.0], [47.1, 30826.0], [47.2, 30835.0], [47.3, 30845.0], [47.4, 30850.0], [47.5, 30888.0], [47.6, 30897.0], [47.7, 30900.0], [47.8, 30901.0], [47.9, 30901.0], [48.0, 30903.0], [48.1, 30903.0], [48.2, 30903.0], [48.3, 30904.0], [48.4, 30904.0], [48.5, 30905.0], [48.6, 30906.0], [48.7, 30907.0], [48.8, 30908.0], [48.9, 30909.0], [49.0, 30909.0], [49.1, 30922.0], [49.2, 31015.0], [49.3, 31057.0], [49.4, 31104.0], [49.5, 31164.0], [49.6, 31200.0], [49.7, 31297.0], [49.8, 31317.0], [49.9, 31363.0], [50.0, 31376.0], [50.1, 31456.0], [50.2, 31551.0], [50.3, 31554.0], [50.4, 31555.0], [50.5, 31564.0], [50.6, 31569.0], [50.7, 31573.0], [50.8, 31578.0], [50.9, 31585.0], [51.0, 31587.0], [51.1, 31588.0], [51.2, 31588.0], [51.3, 31588.0], [51.4, 31588.0], [51.5, 31588.0], [51.6, 31589.0], [51.7, 31589.0], [51.8, 31589.0], [51.9, 31589.0], [52.0, 31589.0], [52.1, 31589.0], [52.2, 31590.0], [52.3, 31590.0], [52.4, 31591.0], [52.5, 31591.0], [52.6, 31591.0], [52.7, 31591.0], [52.8, 31591.0], [52.9, 31591.0], [53.0, 31592.0], [53.1, 31592.0], [53.2, 31592.0], [53.3, 31592.0], [53.4, 31592.0], [53.5, 31592.0], [53.6, 31593.0], [53.7, 31593.0], [53.8, 31593.0], [53.9, 31593.0], [54.0, 31594.0], [54.1, 31594.0], [54.2, 31594.0], [54.3, 31594.0], [54.4, 31594.0], [54.5, 31594.0], [54.6, 31594.0], [54.7, 31595.0], [54.8, 31595.0], [54.9, 31595.0], [55.0, 31596.0], [55.1, 31599.0], [55.2, 31602.0], [55.3, 31604.0], [55.4, 31614.0], [55.5, 31624.0], [55.6, 31629.0], [55.7, 31631.0], [55.8, 31634.0], [55.9, 31637.0], [56.0, 31682.0], [56.1, 31702.0], [56.2, 31705.0], [56.3, 31714.0], [56.4, 31786.0], [56.5, 31797.0], [56.6, 31800.0], [56.7, 31806.0], [56.8, 31812.0], [56.9, 31881.0], [57.0, 31893.0], [57.1, 31900.0], [57.2, 31906.0], [57.3, 31911.0], [57.4, 31942.0], [57.5, 31949.0], [57.6, 31973.0], [57.7, 32008.0], [57.8, 32010.0], [57.9, 32011.0], [58.0, 32013.0], [58.1, 32013.0], [58.2, 32014.0], [58.3, 32015.0], [58.4, 32015.0], [58.5, 32016.0], [58.6, 32027.0], [58.7, 32090.0], [58.8, 32106.0], [58.9, 32106.0], [59.0, 32164.0], [59.1, 32165.0], [59.2, 32168.0], [59.3, 32170.0], [59.4, 32182.0], [59.5, 32184.0], [59.6, 32186.0], [59.7, 32186.0], [59.8, 32186.0], [59.9, 32187.0], [60.0, 32188.0], [60.1, 32188.0], [60.2, 32188.0], [60.3, 32188.0], [60.4, 32189.0], [60.5, 32189.0], [60.6, 32189.0], [60.7, 32190.0], [60.8, 32190.0], [60.9, 32190.0], [61.0, 32190.0], [61.1, 32190.0], [61.2, 32190.0], [61.3, 32190.0], [61.4, 32191.0], [61.5, 32191.0], [61.6, 32192.0], [61.7, 32192.0], [61.8, 32192.0], [61.9, 32192.0], [62.0, 32192.0], [62.1, 32193.0], [62.2, 32193.0], [62.3, 32193.0], [62.4, 32194.0], [62.5, 32194.0], [62.6, 32194.0], [62.7, 32194.0], [62.8, 32194.0], [62.9, 32196.0], [63.0, 32196.0], [63.1, 32197.0], [63.2, 32197.0], [63.3, 32197.0], [63.4, 32199.0], [63.5, 32199.0], [63.6, 32215.0], [63.7, 32216.0], [63.8, 32217.0], [63.9, 32226.0], [64.0, 32234.0], [64.1, 32283.0], [64.2, 32405.0], [64.3, 32408.0], [64.4, 32408.0], [64.5, 32413.0], [64.6, 32435.0], [64.7, 32449.0], [64.8, 32485.0], [64.9, 32501.0], [65.0, 32503.0], [65.1, 32534.0], [65.2, 32688.0], [65.3, 32697.0], [65.4, 32708.0], [65.5, 32709.0], [65.6, 32712.0], [65.7, 32718.0], [65.8, 32752.0], [65.9, 32790.0], [66.0, 32798.0], [66.1, 32813.0], [66.2, 32822.0], [66.3, 32915.0], [66.4, 32967.0], [66.5, 32989.0], [66.6, 33001.0], [66.7, 33002.0], [66.8, 33002.0], [66.9, 33003.0], [67.0, 33012.0], [67.1, 33013.0], [67.2, 33017.0], [67.3, 33042.0], [67.4, 33069.0], [67.5, 33092.0], [67.6, 33116.0], [67.7, 33117.0], [67.8, 33210.0], [67.9, 33235.0], [68.0, 33250.0], [68.1, 33297.0], [68.2, 33300.0], [68.3, 33303.0], [68.4, 33304.0], [68.5, 33305.0], [68.6, 33308.0], [68.7, 33308.0], [68.8, 33309.0], [68.9, 33354.0], [69.0, 33368.0], [69.1, 33380.0], [69.2, 33386.0], [69.3, 33387.0], [69.4, 33388.0], [69.5, 33389.0], [69.6, 33389.0], [69.7, 33390.0], [69.8, 33390.0], [69.9, 33391.0], [70.0, 33391.0], [70.1, 33392.0], [70.2, 33392.0], [70.3, 33392.0], [70.4, 33392.0], [70.5, 33392.0], [70.6, 33392.0], [70.7, 33392.0], [70.8, 33392.0], [70.9, 33394.0], [71.0, 33394.0], [71.1, 33394.0], [71.2, 33395.0], [71.3, 33395.0], [71.4, 33395.0], [71.5, 33396.0], [71.6, 33396.0], [71.7, 33397.0], [71.8, 33397.0], [71.9, 33397.0], [72.0, 33404.0], [72.1, 33404.0], [72.2, 33407.0], [72.3, 33418.0], [72.4, 33421.0], [72.5, 33428.0], [72.6, 33436.0], [72.7, 33480.0], [72.8, 33481.0], [72.9, 33505.0], [73.0, 33508.0], [73.1, 33508.0], [73.2, 33509.0], [73.3, 33513.0], [73.4, 33533.0], [73.5, 33535.0], [73.6, 33579.0], [73.7, 33592.0], [73.8, 33601.0], [73.9, 33602.0], [74.0, 33603.0], [74.1, 33608.0], [74.2, 33608.0], [74.3, 33634.0], [74.4, 33686.0], [74.5, 33694.0], [74.6, 33817.0], [74.7, 33849.0], [74.8, 33857.0], [74.9, 33901.0], [75.0, 33905.0], [75.1, 33905.0], [75.2, 33906.0], [75.3, 33908.0], [75.4, 33909.0], [75.5, 33910.0], [75.6, 33911.0], [75.7, 33913.0], [75.8, 33995.0], [75.9, 34023.0], [76.0, 34067.0], [76.1, 34112.0], [76.2, 34133.0], [76.3, 34203.0], [76.4, 34203.0], [76.5, 34204.0], [76.6, 34204.0], [76.7, 34204.0], [76.8, 34206.0], [76.9, 34210.0], [77.0, 34286.0], [77.1, 34287.0], [77.2, 34288.0], [77.3, 34289.0], [77.4, 34289.0], [77.5, 34290.0], [77.6, 34292.0], [77.7, 34293.0], [77.8, 34293.0], [77.9, 34293.0], [78.0, 34293.0], [78.1, 34293.0], [78.2, 34293.0], [78.3, 34295.0], [78.4, 34295.0], [78.5, 34295.0], [78.6, 34296.0], [78.7, 34297.0], [78.8, 34297.0], [78.9, 34306.0], [79.0, 34309.0], [79.1, 34312.0], [79.2, 34320.0], [79.3, 34329.0], [79.4, 34336.0], [79.5, 34388.0], [79.6, 34472.0], [79.7, 34498.0], [79.8, 34498.0], [79.9, 34499.0], [80.0, 34508.0], [80.1, 34509.0], [80.2, 34510.0], [80.3, 34512.0], [80.4, 34512.0], [80.5, 34512.0], [80.6, 34530.0], [80.7, 34590.0], [80.8, 34601.0], [80.9, 34620.0], [81.0, 34657.0], [81.1, 34703.0], [81.2, 34791.0], [81.3, 34797.0], [81.4, 34801.0], [81.5, 34807.0], [81.6, 34853.0], [81.7, 34889.0], [81.8, 34919.0], [81.9, 34998.0], [82.0, 35055.0], [82.1, 35100.0], [82.2, 35103.0], [82.3, 35191.0], [82.4, 35220.0], [82.5, 35304.0], [82.6, 35314.0], [82.7, 35397.0], [82.8, 35398.0], [82.9, 35401.0], [83.0, 35402.0], [83.1, 35402.0], [83.2, 35403.0], [83.3, 35404.0], [83.4, 35407.0], [83.5, 35408.0], [83.6, 35410.0], [83.7, 35415.0], [83.8, 35426.0], [83.9, 35489.0], [84.0, 35494.0], [84.1, 35515.0], [84.2, 35521.0], [84.3, 35526.0], [84.4, 35572.0], [84.5, 35595.0], [84.6, 35614.0], [84.7, 35621.0], [84.8, 35657.0], [84.9, 35660.0], [85.0, 35694.0], [85.1, 35699.0], [85.2, 35701.0], [85.3, 35702.0], [85.4, 35702.0], [85.5, 35707.0], [85.6, 35707.0], [85.7, 35708.0], [85.8, 35708.0], [85.9, 35709.0], [86.0, 35710.0], [86.1, 35710.0], [86.2, 35712.0], [86.3, 35712.0], [86.4, 35716.0], [86.5, 35792.0], [86.6, 35828.0], [86.7, 35865.0], [86.8, 35913.0], [86.9, 35917.0], [87.0, 35997.0], [87.1, 36003.0], [87.2, 36004.0], [87.3, 36005.0], [87.4, 36111.0], [87.5, 36315.0], [87.6, 36373.0], [87.7, 36402.0], [87.8, 36523.0], [87.9, 36594.0], [88.0, 36598.0], [88.1, 36600.0], [88.2, 36604.0], [88.3, 36608.0], [88.4, 36608.0], [88.5, 36609.0], [88.6, 36610.0], [88.7, 36611.0], [88.8, 36612.0], [88.9, 36614.0], [89.0, 36614.0], [89.1, 36698.0], [89.2, 36818.0], [89.3, 36970.0], [89.4, 37061.0], [89.5, 37190.0], [89.6, 37229.0], [89.7, 37248.0], [89.8, 37310.0], [89.9, 37417.0], [90.0, 37510.0], [90.1, 37529.0], [90.2, 37578.0], [90.3, 37584.0], [90.4, 37591.0], [90.5, 37596.0], [90.6, 37599.0], [90.7, 37599.0], [90.8, 37600.0], [90.9, 37601.0], [91.0, 37601.0], [91.1, 37601.0], [91.2, 37602.0], [91.3, 37603.0], [91.4, 37607.0], [91.5, 37608.0], [91.6, 37612.0], [91.7, 37616.0], [91.8, 37625.0], [91.9, 37790.0], [92.0, 37792.0], [92.1, 56304.0], [92.2, 56460.0], [92.3, 56598.0], [92.4, 56727.0], [92.5, 56932.0], [92.6, 57211.0], [92.7, 57453.0], [92.8, 57775.0], [92.9, 58032.0], [93.0, 58325.0], [93.1, 58634.0], [93.2, 58904.0], [93.3, 59201.0], [93.4, 59492.0], [93.5, 59924.0], [93.6, 59926.0], [93.7, 59948.0], [93.8, 59959.0], [93.9, 59967.0], [94.0, 59968.0], [94.1, 59969.0], [94.2, 59969.0], [94.3, 59974.0], [94.4, 59977.0], [94.5, 59979.0], [94.6, 59991.0], [94.7, 59994.0], [94.8, 60003.0], [94.9, 60005.0], [95.0, 60006.0], [95.1, 60026.0], [95.2, 60028.0], [95.3, 60038.0], [95.4, 60049.0], [95.5, 60050.0], [95.6, 60051.0], [95.7, 60052.0], [95.8, 60054.0], [95.9, 60060.0], [96.0, 60067.0], [96.1, 60074.0], [96.2, 60089.0], [96.3, 60096.0], [96.4, 60160.0], [96.5, 60162.0], [96.6, 60242.0], [96.7, 60250.0], [96.8, 60256.0], [96.9, 60268.0], [97.0, 60269.0], [97.1, 60269.0], [97.2, 60280.0], [97.3, 60287.0], [97.4, 60301.0], [97.5, 60304.0], [97.6, 60306.0], [97.7, 60310.0], [97.8, 60310.0], [97.9, 60311.0], [98.0, 60314.0], [98.1, 60315.0], [98.2, 60318.0], [98.3, 60319.0], [98.4, 60320.0], [98.5, 60325.0], [98.6, 60328.0], [98.7, 60345.0], [98.8, 60388.0], [98.9, 60392.0], [99.0, 60584.0], [99.1, 60768.0], [99.2, 60881.0], [99.3, 60896.0], [99.4, 61105.0], [99.5, 61212.0], [99.6, 61470.0], [99.7, 61730.0], [99.8, 62076.0], [99.9, 62227.0]], "isOverall": false, "label": "Post new post", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 218.0, "series": [{"data": [[0.0, 4.0], [100.0, 1.0], [33100.0, 9.0], [33700.0, 12.0], [34300.0, 24.0], [33500.0, 2.0], [33300.0, 38.0], [34500.0, 8.0], [33900.0, 6.0], [32900.0, 2.0], [34100.0, 1.0], [35100.0, 3.0], [35700.0, 4.0], [35500.0, 25.0], [34900.0, 13.0], [36500.0, 5.0], [36100.0, 3.0], [35900.0, 1.0], [36700.0, 2.0], [36300.0, 2.0], [37300.0, 3.0], [36900.0, 1.0], [200.0, 175.0], [500.0, 1.0], [6200.0, 1.0], [6500.0, 1.0], [6800.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8300.0, 1.0], [8600.0, 1.0], [9200.0, 1.0], [8900.0, 1.0], [9500.0, 1.0], [10100.0, 1.0], [9800.0, 1.0], [10400.0, 1.0], [10700.0, 1.0], [11000.0, 1.0], [11300.0, 1.0], [11600.0, 1.0], [12200.0, 1.0], [12500.0, 1.0], [13100.0, 1.0], [12800.0, 1.0], [13400.0, 1.0], [13900.0, 1.0], [14200.0, 1.0], [14500.0, 1.0], [14800.0, 1.0], [15100.0, 1.0], [15700.0, 1.0], [15400.0, 1.0], [16300.0, 1.0], [16000.0, 1.0], [16900.0, 1.0], [17200.0, 1.0], [16600.0, 1.0], [17500.0, 1.0], [19000.0, 1.0], [19300.0, 1.0], [18700.0, 1.0], [20400.0, 1.0], [20100.0, 1.0], [19900.0, 1.0], [19600.0, 1.0], [21500.0, 1.0], [20800.0, 1.0], [21400.0, 1.0], [21100.0, 1.0], [22500.0, 1.0], [21900.0, 1.0], [22300.0, 1.0], [23000.0, 1.0], [23300.0, 1.0], [22700.0, 1.0], [24500.0, 1.0], [23600.0, 1.0], [24200.0, 1.0], [23900.0, 1.0], [25400.0, 1.0], [25100.0, 1.0], [24800.0, 1.0], [26600.0, 2.0], [26300.0, 1.0], [25700.0, 1.0], [26000.0, 1.0], [27200.0, 2.0], [27500.0, 2.0], [26900.0, 2.0], [27600.0, 1.0], [27300.0, 1.0], [28000.0, 1.0], [27700.0, 1.0], [28600.0, 1.0], [28400.0, 2.0], [28500.0, 1.0], [28200.0, 1.0], [27900.0, 1.0], [28100.0, 1.0], [29500.0, 2.0], [28900.0, 1.0], [29200.0, 2.0], [29600.0, 1.0], [29300.0, 1.0], [29100.0, 1.0], [28800.0, 1.0], [29000.0, 1.0], [28700.0, 1.0], [29800.0, 2.0], [30000.0, 181.0], [30100.0, 7.0], [30200.0, 5.0], [30700.0, 17.0], [30600.0, 3.0], [29900.0, 1.0], [30300.0, 1.0], [30400.0, 1.0], [30500.0, 3.0], [31500.0, 55.0], [31300.0, 3.0], [31400.0, 1.0], [31200.0, 3.0], [31000.0, 2.0], [30900.0, 4.0], [30800.0, 4.0], [31600.0, 10.0], [31100.0, 2.0], [31700.0, 2.0], [31900.0, 11.0], [32200.0, 10.0], [32100.0, 49.0], [31800.0, 9.0], [32000.0, 5.0], [32700.0, 5.0], [32600.0, 3.0], [32400.0, 4.0], [32300.0, 2.0], [32500.0, 2.0], [33000.0, 4.0], [32800.0, 8.0], [33600.0, 6.0], [33400.0, 21.0], [34000.0, 8.0], [34800.0, 2.0], [34600.0, 9.0], [33200.0, 1.0], [34200.0, 17.0], [33800.0, 1.0], [35800.0, 15.0], [35200.0, 18.0], [35400.0, 5.0], [36400.0, 11.0], [36200.0, 1.0], [36000.0, 2.0], [35600.0, 2.0], [36600.0, 1.0], [37000.0, 3.0], [37600.0, 17.0], [37400.0, 1.0], [37200.0, 1.0]], "isOverall": false, "label": "Get posts", "isController": false}, {"data": [[0.0, 169.0], [100.0, 10.0], [34700.0, 3.0], [33900.0, 10.0], [33500.0, 9.0], [33300.0, 39.0], [32900.0, 3.0], [33100.0, 2.0], [34500.0, 8.0], [34100.0, 2.0], [34300.0, 7.0], [35300.0, 4.0], [36300.0, 2.0], [36100.0, 1.0], [36500.0, 3.0], [34900.0, 2.0], [35100.0, 3.0], [35500.0, 5.0], [35700.0, 14.0], [35900.0, 3.0], [36900.0, 1.0], [37100.0, 1.0], [37500.0, 8.0], [37300.0, 1.0], [37700.0, 2.0], [56900.0, 1.0], [56500.0, 1.0], [56700.0, 1.0], [56300.0, 1.0], [58900.0, 1.0], [58300.0, 1.0], [57700.0, 1.0], [59900.0, 13.0], [60100.0, 2.0], [60300.0, 16.0], [61100.0, 1.0], [60700.0, 1.0], [60500.0, 1.0], [61700.0, 1.0], [30000.0, 218.0], [30100.0, 11.0], [30200.0, 13.0], [30500.0, 3.0], [30300.0, 14.0], [30700.0, 3.0], [30600.0, 13.0], [30400.0, 8.0], [30900.0, 15.0], [30800.0, 14.0], [31200.0, 2.0], [31500.0, 50.0], [31700.0, 5.0], [31600.0, 9.0], [31300.0, 3.0], [31000.0, 2.0], [31400.0, 1.0], [31100.0, 2.0], [31900.0, 6.0], [32400.0, 7.0], [31800.0, 5.0], [32000.0, 11.0], [32100.0, 48.0], [32700.0, 7.0], [32500.0, 3.0], [32200.0, 6.0], [32600.0, 2.0], [34800.0, 4.0], [33000.0, 10.0], [33800.0, 3.0], [34600.0, 3.0], [33600.0, 8.0], [33400.0, 9.0], [32800.0, 2.0], [34400.0, 4.0], [33200.0, 4.0], [34200.0, 26.0], [34000.0, 2.0], [36400.0, 1.0], [35800.0, 2.0], [36600.0, 11.0], [35200.0, 1.0], [35000.0, 1.0], [35600.0, 6.0], [35400.0, 12.0], [36000.0, 3.0], [36800.0, 1.0], [37200.0, 2.0], [37000.0, 1.0], [37600.0, 11.0], [37400.0, 1.0], [57200.0, 1.0], [56400.0, 1.0], [59200.0, 1.0], [58600.0, 1.0], [58000.0, 1.0], [57400.0, 1.0], [59400.0, 1.0], [60000.0, 16.0], [60200.0, 8.0], [61400.0, 1.0], [60800.0, 2.0], [61200.0, 1.0], [62200.0, 1.0], [62000.0, 1.0]], "isOverall": false, "label": "Post new post", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 62200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 1521.0, "series": [{"data": [[0.0, 350.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 128.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 1521.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.2019230769230778, "minX": 1.68647748E12, "maxY": 225.1026315789472, "series": [{"data": [[1.68647766E12, 214.22834645669292], [1.68647748E12, 1.2019230769230778], [1.68647778E12, 212.92894736842112], [1.6864776E12, 175.0387323943664], [1.68647772E12, 225.1026315789472], [1.68647754E12, 32.514563106796125], [1.68647784E12, 79.65217391304348]], "isOverall": false, "label": "Usuarios web-mysql standalone", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68647784E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 209.63333333333338, "minX": 1.0, "maxY": 62227.0, "series": [{"data": [[101.0, 30089.0], [102.0, 30086.0], [103.0, 30092.0], [104.0, 30088.0], [105.0, 30088.0], [106.0, 30091.0], [107.0, 30091.0], [108.0, 30089.0], [109.0, 30089.0], [110.0, 30089.0], [111.0, 30091.0], [112.0, 30090.0], [113.0, 30087.0], [114.0, 30088.0], [115.0, 30095.0], [116.0, 30088.0], [117.0, 30092.0], [118.0, 30089.0], [119.0, 30085.0], [120.0, 30090.0], [121.0, 30091.0], [122.0, 30090.0], [123.0, 30089.0], [124.0, 26301.37037037037], [125.0, 14126.8], [135.0, 32681.0], [134.0, 32412.0], [133.0, 32159.0], [132.0, 31892.0], [136.0, 31531.0], [137.0, 31679.5], [138.0, 31814.5], [139.0, 31959.0], [140.0, 32095.0], [141.0, 30089.0], [142.0, 30103.0], [143.0, 33533.0], [144.0, 32658.0], [145.0, 30089.0], [146.0, 35320.0], [147.0, 35504.75], [148.0, 35038.666666666664], [149.0, 33853.5], [150.0, 33850.0], [151.0, 33857.5], [152.0, 33855.5], [153.0, 33849.5], [154.0, 33848.0], [155.0, 33849.5], [156.0, 33849.5], [157.0, 33848.5], [158.0, 33848.5], [159.0, 33850.5], [164.0, 32596.666666666668], [165.0, 31994.666666666668], [166.0, 31897.666666666668], [160.0, 33852.5], [161.0, 33848.0], [162.0, 33846.5], [163.0, 33848.5], [167.0, 32687.0], [168.0, 31863.333333333332], [169.0, 32688.5], [170.0, 32692.5], [171.0, 32687.5], [172.0, 32688.5], [173.0, 32690.5], [174.0, 31858.666666666668], [175.0, 32797.5], [180.0, 31994.333333333332], [176.0, 32794.0], [177.0, 33744.666666666664], [178.0, 32845.5], [179.0, 33826.0], [181.0, 32947.0], [182.0, 33927.333333333336], [183.0, 32991.5], [186.0, 30094.0], [184.0, 32991.0], [185.0, 32989.5], [187.0, 31993.333333333332], [188.0, 30087.0], [189.0, 32840.0], [190.0, 30090.0], [191.0, 32800.0], [192.0, 30088.0], [193.0, 32687.5], [194.0, 30089.0], [195.0, 32646.5], [196.0, 30089.0], [197.0, 32543.0], [198.0, 30089.0], [199.0, 32496.0], [206.0, 30089.78947368421], [200.0, 30088.0], [201.0, 26858.250000000004], [202.0, 28463.749999999996], [203.0, 32343.0], [204.0, 29091.46666666667], [205.0, 35631.2], [211.0, 30215.560606060608], [212.0, 31277.0], [213.0, 30895.47619047619], [214.0, 31352.0], [215.0, 31575.508771929824], [210.0, 32875.0], [208.0, 37006.0], [218.0, 32187.0], [219.0, 31812.55], [220.0, 33091.166666666664], [221.0, 32135.444444444445], [217.0, 31469.333333333332], [216.0, 31894.0], [222.0, 32375.385964912282], [223.0, 33000.22222222222], [224.0, 32571.1], [225.0, 32758.153846153844], [226.0, 33084.1], [229.0, 33462.413043478264], [230.0, 34136.33333333333], [231.0, 34636.2], [228.0, 33187.14285714286], [227.0, 32681.500000000004], [232.0, 33790.24999999999], [233.0, 33714.4], [236.0, 34597.47500000002], [237.0, 34454.91666666667], [238.0, 34114.700000000004], [239.0, 33943.875], [235.0, 33974.75], [234.0, 33986.0], [240.0, 34263.00000000001], [241.0, 34779.0], [243.0, 36253.950000000004], [244.0, 36336.333333333336], [1.0, 209.63333333333338]], "isOverall": false, "label": "Get posts", "isController": false}, {"data": [[163.59699999999998, 25581.661999999993]], "isOverall": false, "label": "Get posts-Aggregated", "isController": false}, {"data": [[2.0, 556.7538461538461], [3.0, 30352.0], [4.0, 30378.0], [5.0, 60320.0], [6.0, 60318.0], [7.0, 60301.0], [8.0, 60345.0], [9.0, 60310.0], [10.0, 60319.0], [12.0, 61054.0], [13.0, 62076.0], [14.0, 30086.0], [15.0, 30086.0], [16.0, 30095.0], [17.0, 62227.0], [18.0, 30085.0], [19.0, 30084.0], [21.0, 30085.5], [22.0, 30086.0], [23.0, 30085.0], [24.0, 30086.0], [25.0, 30085.0], [26.0, 30112.0], [27.0, 30095.0], [29.0, 30096.5], [30.0, 30094.0], [31.0, 30087.0], [33.0, 30089.0], [32.0, 30087.0], [35.0, 30088.0], [34.0, 30085.0], [37.0, 30084.0], [36.0, 30087.0], [39.0, 30088.0], [38.0, 30089.0], [41.0, 30096.0], [40.0, 30086.0], [43.0, 30086.0], [42.0, 30087.0], [45.0, 30086.0], [44.0, 30087.0], [47.0, 30092.0], [46.0, 30085.0], [49.0, 30085.0], [48.0, 30087.0], [51.0, 30088.0], [50.0, 30086.0], [53.0, 30087.0], [52.0, 30087.0], [55.0, 30087.0], [54.0, 30086.0], [57.0, 30086.0], [56.0, 30088.0], [59.0, 30088.0], [58.0, 30087.0], [61.0, 30095.0], [60.0, 30086.0], [63.0, 30088.0], [62.0, 30090.0], [67.0, 30086.0], [66.0, 30087.0], [65.0, 30087.0], [64.0, 30085.0], [71.0, 30087.0], [70.0, 30086.0], [69.0, 30095.0], [68.0, 30090.0], [75.0, 30086.0], [74.0, 30086.0], [73.0, 30086.0], [72.0, 30086.0], [79.0, 30087.0], [78.0, 30086.0], [77.0, 30088.0], [76.0, 30086.0], [83.0, 30211.0], [82.0, 30086.0], [81.0, 30088.0], [80.0, 30087.0], [87.0, 30803.0], [86.0, 30687.0], [85.0, 30605.0], [84.0, 30395.0], [91.0, 30826.0], [90.0, 30763.0], [89.0, 30811.0], [88.0, 30685.0], [95.0, 30835.0], [94.0, 30692.0], [93.0, 30811.0], [92.0, 30699.0], [99.0, 30818.0], [98.0, 30695.0], [97.0, 30819.0], [96.0, 30692.0], [101.0, 30453.5], [103.0, 30816.0], [102.0, 30675.0], [100.0, 30692.0], [107.0, 37792.0], [106.0, 37790.0], [105.0, 31200.0], [104.0, 30687.0], [111.0, 60310.0], [110.0, 37310.0], [109.0, 37510.0], [108.0, 37578.0], [115.0, 60314.0], [114.0, 60287.0], [113.0, 60269.0], [112.0, 60328.0], [119.0, 30351.0], [118.0, 30318.0], [117.0, 60315.0], [116.0, 30311.0], [123.0, 30460.0], [122.0, 30417.0], [121.0, 30422.0], [120.0, 30395.0], [127.0, 60584.0], [126.0, 30845.0], [125.0, 30651.0], [124.0, 30448.0], [135.0, 32485.0], [134.0, 61730.0], [133.0, 61470.0], [132.0, 31786.0], [131.0, 31702.0], [130.0, 31376.0], [129.0, 60881.0], [128.0, 31104.0], [143.0, 33112.666666666664], [142.0, 30056.0], [141.0, 32130.0], [140.0, 31983.5], [139.0, 31847.0], [138.0, 31705.0], [137.0, 31564.5], [136.0, 32752.0], [151.0, 33817.5], [150.0, 33820.0], [149.0, 33830.5], [148.0, 32540.333333333332], [147.0, 33732.5], [146.0, 31898.666666666668], [145.0, 32679.0], [144.0, 35055.0], [159.0, 32563.666666666668], [157.0, 31937.5], [155.0, 33827.0], [154.0, 33838.0], [152.0, 33828.5], [158.0, 37599.0], [156.0, 37607.0], [153.0, 37603.0], [165.0, 33025.0], [164.0, 33822.0], [163.0, 32563.666666666668], [161.0, 33823.5], [160.0, 33813.5], [167.0, 35426.0], [166.0, 35707.0], [162.0, 37602.0], [168.0, 31388.25], [174.0, 31416.25], [175.0, 35403.0], [173.0, 35398.0], [172.0, 35410.0], [171.0, 35401.0], [170.0, 35397.0], [169.0, 35415.0], [183.0, 32979.5], [182.0, 32950.5], [181.0, 32883.5], [180.0, 32876.0], [179.0, 36475.0], [178.0, 36292.0], [177.0, 35944.0], [176.0, 32065.0], [191.0, 32769.5], [190.0, 32851.0], [189.0, 32920.5], [188.0, 32876.0], [187.0, 31989.0], [186.0, 32980.5], [185.0, 33026.0], [184.0, 33024.5], [199.0, 32486.0], [198.0, 31711.0], [196.0, 32623.5], [195.0, 32619.0], [194.0, 32706.5], [193.0, 32728.0], [192.0, 31850.0], [197.0, 35100.0], [206.0, 35160.958333333336], [205.0, 39279.857142857145], [203.0, 42446.8], [201.0, 32459.0], [202.0, 42854.57142857143], [207.0, 54418.6], [204.0, 45656.25], [200.0, 34797.0], [214.0, 34616.86956521739], [213.0, 34611.42857142857], [211.0, 31939.530303030304], [210.0, 53478.4], [209.0, 55401.5], [208.0, 54664.6], [212.0, 45157.83333333333], [215.0, 32969.88333333334], [219.0, 34247.4], [221.0, 31696.375], [220.0, 33642.63157894737], [217.0, 38581.25], [216.0, 42455.4], [223.0, 37027.46153846154], [222.0, 32095.264150943396], [218.0, 37783.5], [224.0, 41754.0], [226.0, 32530.636363636364], [225.0, 43101.875], [230.0, 33884.818181818184], [231.0, 33743.166666666664], [229.0, 33329.547619047626], [228.0, 32175.666666666668], [227.0, 39841.75], [233.0, 33310.0], [232.0, 32915.0], [237.0, 34980.78947368421], [238.0, 34151.00000000001], [239.0, 33688.57142857143], [236.0, 34234.28571428571], [235.0, 33273.5], [234.0, 33022.5], [240.0, 33873.625], [241.0, 34546.0], [244.0, 36568.13333333333], [243.0, 35521.0], [242.0, 35069.5], [1.0, 342.7586206896551]], "isOverall": false, "label": "Post new post", "isController": false}, {"data": [[153.959, 28640.99199999997]], "isOverall": false, "label": "Post new post-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 244.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 672.5333333333333, "minX": 1.68647748E12, "maxY": 240098.1, "series": [{"data": [[1.68647766E12, 35474.05], [1.68647748E12, 222971.48333333334], [1.68647778E12, 6607.333333333333], [1.6864776E12, 113974.76666666666], [1.68647772E12, 30782.1], [1.68647754E12, 240098.1], [1.68647784E12, 745.3166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68647766E12, 1389.3333333333333], [1.68647748E12, 762.6666666666666], [1.68647778E12, 1384.1333333333334], [1.6864776E12, 955.4666666666667], [1.68647772E12, 1378.0], [1.68647754E12, 672.5333333333333], [1.68647784E12, 791.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68647784E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 86.30769230769232, "minX": 1.68647748E12, "maxY": 37381.22994652405, "series": [{"data": [[1.68647766E12, 31040.98445595854], [1.68647748E12, 212.87500000000006], [1.68647778E12, 35019.544041450754], [1.6864776E12, 25713.258823529413], [1.68647772E12, 32966.4358974359], [1.68647754E12, 11559.530769230769], [1.68647784E12, 33826.2]], "isOverall": false, "label": "Get posts", "isController": false}, {"data": [[1.68647766E12, 34199.287234042575], [1.68647748E12, 86.30769230769232], [1.68647778E12, 37381.22994652405], [1.6864776E12, 30485.59649122807], [1.68647772E12, 35591.11351351349], [1.68647754E12, 478.82894736842104], [1.68647784E12, 35042.15753424658]], "isOverall": false, "label": "Post new post", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68647784E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 86.24038461538457, "minX": 1.68647748E12, "maxY": 37381.010695187164, "series": [{"data": [[1.68647766E12, 31032.440414507768], [1.68647748E12, 95.23076923076921], [1.68647778E12, 35018.119170984486], [1.6864776E12, 25677.794117647045], [1.68647772E12, 32959.035897435904], [1.68647754E12, 11465.715384615385], [1.68647784E12, 33826.0]], "isOverall": false, "label": "Get posts", "isController": false}, {"data": [[1.68647766E12, 34199.085106382976], [1.68647748E12, 86.24038461538457], [1.68647778E12, 37381.010695187164], [1.6864776E12, 30485.28070175438], [1.68647772E12, 35590.94054054052], [1.68647754E12, 478.7631578947369], [1.68647784E12, 35041.95205479449]], "isOverall": false, "label": "Post new post", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68647784E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68647748E12, "maxY": 39.923076923076906, "series": [{"data": [[1.68647766E12, 39.13471502590673], [1.68647748E12, 39.51923076923079], [1.68647778E12, 39.575129533678734], [1.6864776E12, 39.735294117647044], [1.68647772E12, 39.19999999999998], [1.68647754E12, 39.923076923076906], [1.68647784E12, 39.73333333333333]], "isOverall": false, "label": "Get posts", "isController": false}, {"data": [[1.68647766E12, 36.085106382978694], [1.68647748E12, 0.0], [1.68647778E12, 37.40106951871657], [1.6864776E12, 15.93859649122807], [1.68647772E12, 34.972972972972975], [1.68647754E12, 2.5526315789473686], [1.68647784E12, 38.876712328767134]], "isOverall": false, "label": "Post new post", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68647784E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 72.0, "minX": 1.68647748E12, "maxY": 60328.0, "series": [{"data": [[1.68647766E12, 60096.0], [1.68647748E12, 279.0], [1.68647778E12, 60325.0], [1.6864776E12, 30213.0], [1.68647772E12, 60089.0], [1.68647754E12, 30158.0], [1.68647784E12, 60328.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68647766E12, 60058.2], [1.68647748E12, 215.0], [1.68647778E12, 60325.0], [1.6864776E12, 20878.2], [1.68647772E12, 60077.0], [1.68647754E12, 25325.0], [1.68647784E12, 60328.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68647766E12, 60096.0], [1.68647748E12, 259.21999999999986], [1.68647778E12, 60325.0], [1.6864776E12, 30213.0], [1.68647772E12, 60089.0], [1.68647754E12, 29951.539999999997], [1.68647784E12, 60328.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68647766E12, 60090.6], [1.68647748E12, 217.0], [1.68647778E12, 60325.0], [1.6864776E12, 21961.199999999993], [1.68647772E12, 60089.0], [1.68647754E12, 27884.799999999996], [1.68647784E12, 60328.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68647766E12, 592.0], [1.68647748E12, 72.0], [1.68647778E12, 30504.0], [1.6864776E12, 6266.0], [1.68647772E12, 26630.0], [1.68647754E12, 73.0], [1.68647784E12, 30330.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68647766E12, 30060.0], [1.68647748E12, 195.5], [1.68647778E12, 59998.5], [1.6864776E12, 13403.0], [1.68647772E12, 29295.0], [1.68647754E12, 209.0], [1.68647784E12, 30365.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68647784E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 158.5, "minX": 1.0, "maxY": 60319.0, "series": [{"data": [[8.0, 202.0], [33.0, 25756.0], [40.0, 29295.0], [41.0, 60003.0], [46.0, 13254.0], [47.0, 31698.0], [51.0, 60319.0], [53.0, 30213.0], [22.0, 30216.0], [23.0, 29831.5], [6.0, 158.5], [7.0, 162.5], [30.0, 30347.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 30091.5], [33.0, 30089.5], [39.0, 31689.0], [40.0, 31341.0], [41.0, 32643.0], [11.0, 33421.0], [47.0, 32954.0], [3.0, 30088.0], [51.0, 33543.0], [53.0, 30049.0], [4.0, 30088.0], [1.0, 30091.5], [5.0, 32496.5], [22.0, 44226.5], [23.0, 60049.0], [6.0, 33143.0], [7.0, 32208.0], [28.0, 30082.5], [30.0, 30095.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 53.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 91.0, "minX": 1.0, "maxY": 60319.0, "series": [{"data": [[8.0, 100.0], [33.0, 25637.0], [40.0, 29181.0], [41.0, 60003.0], [46.0, 13110.5], [47.0, 31579.0], [51.0, 60319.0], [53.0, 30093.0], [22.0, 30101.5], [23.0, 29718.0], [6.0, 92.0], [7.0, 91.0], [30.0, 30347.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 30091.5], [33.0, 30089.5], [39.0, 31689.0], [40.0, 31341.0], [41.0, 32643.0], [11.0, 33421.0], [47.0, 32954.0], [3.0, 30088.0], [51.0, 33543.0], [53.0, 30049.0], [4.0, 30088.0], [1.0, 30091.5], [5.0, 32495.5], [22.0, 44225.5], [23.0, 60048.0], [6.0, 33143.0], [7.0, 32207.5], [28.0, 30082.0], [30.0, 30095.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 53.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.68647748E12, "maxY": 6.583333333333333, "series": [{"data": [[1.68647766E12, 6.55], [1.68647748E12, 3.4833333333333334], [1.68647778E12, 4.8], [1.6864776E12, 6.166666666666667], [1.68647772E12, 6.583333333333333], [1.68647754E12, 5.5], [1.68647784E12, 0.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68647784E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68647748E12, "maxY": 6.233333333333333, "series": [{"data": [[1.68647766E12, 0.23333333333333334], [1.68647748E12, 1.7333333333333334], [1.68647778E12, 0.03333333333333333], [1.6864776E12, 0.7833333333333333], [1.68647772E12, 0.2], [1.68647754E12, 1.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68647766E12, 0.13333333333333333], [1.68647748E12, 1.7333333333333334], [1.68647778E12, 0.06666666666666667], [1.68647772E12, 0.08333333333333333], [1.68647754E12, 1.1833333333333333], [1.68647784E12, 0.1]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.68647766E12, 5.983333333333333], [1.68647778E12, 6.233333333333333], [1.6864776E12, 3.95], [1.68647772E12, 6.05], [1.68647754E12, 0.55], [1.68647784E12, 2.5833333333333335]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68647784E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68647748E12, "maxY": 3.183333333333333, "series": [{"data": [[1.68647766E12, 0.13333333333333333], [1.68647748E12, 1.7333333333333334], [1.68647778E12, 0.06666666666666667], [1.68647772E12, 0.08333333333333333], [1.68647754E12, 1.1833333333333333], [1.68647784E12, 0.1]], "isOverall": false, "label": "Post new post-success", "isController": false}, {"data": [[1.68647766E12, 0.23333333333333334], [1.68647748E12, 1.7333333333333334], [1.68647778E12, 0.03333333333333333], [1.6864776E12, 0.7833333333333333], [1.68647772E12, 0.2], [1.68647754E12, 1.7]], "isOverall": false, "label": "Get posts-success", "isController": false}, {"data": [[1.68647766E12, 2.9833333333333334], [1.68647778E12, 3.183333333333333], [1.6864776E12, 2.05], [1.68647772E12, 3.05], [1.68647754E12, 0.4666666666666667], [1.68647784E12, 0.25]], "isOverall": false, "label": "Get posts-failure", "isController": false}, {"data": [[1.68647766E12, 3.0], [1.68647778E12, 3.05], [1.6864776E12, 1.9], [1.68647772E12, 3.0], [1.68647754E12, 0.08333333333333333], [1.68647784E12, 2.3333333333333335]], "isOverall": false, "label": "Post new post-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68647784E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.68647748E12, "maxY": 6.233333333333333, "series": [{"data": [[1.68647766E12, 0.36666666666666664], [1.68647748E12, 3.466666666666667], [1.68647778E12, 0.1], [1.6864776E12, 0.7833333333333333], [1.68647772E12, 0.2833333333333333], [1.68647754E12, 2.8833333333333333], [1.68647784E12, 0.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68647766E12, 5.983333333333333], [1.68647778E12, 6.233333333333333], [1.6864776E12, 3.95], [1.68647772E12, 6.05], [1.68647754E12, 0.55], [1.68647784E12, 2.5833333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68647784E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

